

import { Button, DatePicker, Form, Input, Select, Space } from "antd";
import TextArea from "antd/es/input/TextArea";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import moment from "moment";
import {
  addCourse,
  addCourseImg,
} from "../../../redux/Admin/action/callAdminApi";

export default function AddCourse() {
  const listCategoryArr = useSelector(
    (state) => state.dataSlice.categoryCourse
  );
  const user = useSelector((state) => state.userSlice.user);
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [form] = Form.useForm();
  const [urlHinhAnh, setUrlHinhAnh] = useState();
  const [hinhAnh, setHinhAnh] = useState();

  // Hi·ªÉn th·ªã options Danh m·ª•c cho ng∆∞·ªùi d√πng ch·ªçn
  const optionsCategory = listCategoryArr.map((name, index) => ({
    value: name.maDanhMuc,
    label: name.maDanhMuc,
  }));

  useEffect(() => {
    form.setFieldsValue({
      maKhoaHoc: "",
      biDanh: "",
      moTa: "",
      luotXem: 0,
      danhGia: 0,
      maNhom: user.maNhom,
      ngayTao: moment(),
      maDanhMucKhoaHoc: "",
      taiKhoanNguoiTao: user.taiKhoan,
      file: "",
    });
  }, [form, user.maNhom, user.taiKhoan]);

  const onChange = (date, dateString) => {
    // C·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa tr∆∞·ªùng ngayTao
    form.setFieldsValue({
      ngayTao: dateString,
    });
  };

  const onFinish = (values) => {
    console.log("üôÇ ~ onFinish ~ values:", values);
    // L·∫•y t√™n file t·ª´ values.hinhAnh.name
    let tenKhoaHoc = values.hinhAnh.name;

    let acceptedExtensions = ["jpg", "jpeg", "png", "gif"];
    acceptedExtensions.forEach((extension) => {
      tenKhoaHoc = tenKhoaHoc.replace(new RegExp(`\\.${extension}$`, "ig"), "");
    });

    // Thay th·∫ø d·∫•u g·∫°ch ngang b·∫±ng d·∫•u c√°ch
    tenKhoaHoc = tenKhoaHoc.replace(/-/g, " ");

    const formData = new FormData();
    formData.append("tenKhoaHoc", tenKhoaHoc);
    formData.append("file", values.hinhAnh);

    const modifiedValues = {
      ...values,
      tenKhoaHoc: tenKhoaHoc,
      hinhAnh: values.hinhAnh.name,
      taiKhoanNguoiTao: user.taiKhoan,
      formUpload: formData,
    };
    console.log("üôÇ ~ onFinish ~ modifiedValues:", modifiedValues);

    // // G·ªçi h√†m dispatch
    dispatch(addCourse(modifiedValues));
  };
  const validateDate = (rule, value) => {
    if (value && !moment(value, "DD/MM/YYYY", true).isValid()) {
      return Promise.reject(
        "Please enter a valid date in the format DD/MM/YYYY"
      );
    }
    return Promise.resolve();
  };

  return (
    <div>
      <Form
        onFinish={onFinish}
        form={form}
        // onValuesChange={(changedValues, allValues) => {
        //   // Ki·ªÉm tra xem tr∆∞·ªùng tenKhoaHoc c√≥ thay ƒë·ªïi kh√¥ng
        //   if ("tenKhoaHoc" in changedValues) {
        //     // L·∫•y gi√° tr·ªã m·ªõi c·ªßa tenKhoaHoc
        //     const newTenKhoaHoc = `https://elearningnew.cybersoft.edu.vn/hinhanh/${changedValues.tenKhoaHoc}_gp09.png`;
        //     // C·∫≠p nh·∫≠t state v√† s·ª≠ d·ª•ng n√≥ ƒë·ªÉ c·∫≠p nh·∫≠t hinhAnh
        //     setUrlHinhAnh(newTenKhoaHoc);
        //   }
        // }}
        className="p-10"
      >
        <div className="grid grid-cols-2 space-x-5 justify-center items-center ">
          {/* m√£ kh√≥a h·ªçc */}
          <Form.Item
            name="maKhoaHoc"
            label="ID course"
            rules={[
              {
                required: true,
                message: "Please input your ID course!",
              },
              {
                pattern: /^[a-zA-Z0-9]+$/,
                message:
                  "ID course should not contain spaces or special characters!",
              },
            ]}
          >
            <Input />
          </Form.Item>
          {/* t√™n kh√≥a h·ªçc */}
          {/* <Form.Item
            name="tenKhoaHoc"
            label="Name course"
            rules={[
              {
                required: true,
                message: "Please input your Name course!",
              },
              {
                pattern: /^[a-zA-Z\s]+$/,
                message: "Name course contain letters and spaces!",
              },
            ]}
          >
            <Input disabled={true} />
          </Form.Item> */}
          {/* l∆∞·ª£t xem */}
          <Form.Item name="luotXem" label="View">
            <Input type="number" />
          </Form.Item>
          {/* ƒë√°nh gi√° */}
          <Form.Item name="danhGia" label="Review">
            <Input type="number" />
          </Form.Item>
          {/* b√≠ danh */}
          <Form.Item
            name="biDanh"
            label="Alias"
            rules={[
              {
                required: true,
                message: "Please input your Alias!",
              },
            ]}
          >
            <Input />
          </Form.Item>
          {/* m√£ nh√≥m */}
          <Form.Item name="maNhom" label="ID Group">
            <Input disabled={true} />
          </Form.Item>
          {/* m√£ danh m·ª•c */}
          <Form.Item
            name="maDanhMucKhoaHoc"
            label="ID category"
            rules={[
              {
                required: true,
                message: "Please select ID category!",
              },
            ]}
          >
            <Select
              placeholder="Select ID category"
              style={{
                width: 200,
              }}
              options={optionsCategory}
              optionFilterProp="label"
            />
          </Form.Item>
          {/* ng√†y t·∫°o */}
          <Form.Item
            name="ngayTao"
            label="Date"
            rules={[
              {
                required: true,
                message: "Please input the date!",
              },
              {
                validator: validateDate,
              },
            ]}
          >
            <Space direction="vertical">
              <DatePicker onChange={onChange} format="DD/MM/YYYY" />
            </Space>
          </Form.Item>
        </div>
        <div className="grid grid-cols-4 space-x-5">
          {/* h√¨nh ·∫£nh */}
          <Form.Item
            name="hinhAnh"
            label="Image"
            rules={[
              {
                required: true,
                message: "Please input your ID course!",
              },
            ]}
          >
            <input
              type="file"
              accept="image/jpg, image/jpeg, image/png, image/gif"
              className="p-0"
              onChange={(e) => {
                const file = e.target.files[0];
                const reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = (e) => {
                  setHinhAnh(e.target.result);
                };
                // S·ª≠ d·ª•ng form.setFieldsValue ƒë·ªÉ ƒë·∫∑t gi√° tr·ªã cho tr∆∞·ªùng hinhAnh
                form.setFieldsValue({
                  hinhAnh: file,
                });
              }}
            />
            <div className="flex mb-2">
              <p className="m-0 font-semibold w-40 text-right pr-2"></p>
              {hinhAnh && (
                <img
                  src={hinhAnh}
                  alt="..."
                  className="w-40 h-40 bg-gray-200"
                />
              )}
            </div>
          </Form.Item>
          {/* m√¥ t·∫£ */}
          <Form.Item
            name="moTa"
            label="Description"
            className="col-span-3"
            rules={[
              {
                required: true,
                message: "Please input your ID course!",
              },
            ]}
          >
            <TextArea rows={4} placeholder="Description course" />
          </Form.Item>
          {/* n√∫t th√™m */}
        </div>
        <Form.Item
          wrapperCol={{
            offset: 8,
            span: 16,
          }}
        >
          <Button
            className="bg-color3 text-white hover:bg-color4 hover:text-black border-none w-32"
            htmlType="submit"
          >
            Add course
          </Button>
        </Form.Item>
      </Form>
    </div>
  );
}

//
//
// TH·ª∞C HI·ªÜN CH·ª®C NƒÇNG TH√äM KH√ìA H·ªåC UPLOAD ·∫¢NH



/// Edit courseimport {
  Button,
  DatePicker,
  Form,
  Input,
  Select,
  Space,
  Tabs,
  Upload,
} from "antd";
import TextArea from "antd/es/input/TextArea";
import React, { useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams } from "react-router-dom";
import customParseFormat from "dayjs/plugin/customParseFormat";
import dayjs from "dayjs";
import { callListCourse } from "../../../redux/User/action/callApi";

export default function EditCourse() {
  dayjs.extend(customParseFormat);
  const dispatch = useDispatch();
  const { idCourse } = useParams();
  const listCourseArr = useSelector((state) => state.dataSlice.listCourseArr);
  const course = listCourseArr.find((course) => {
    return course.maKhoaHoc === idCourse;
  });
  const listCategoryArr = useSelector(
    (state) => state.dataSlice.categoryCourse
  );
  const [form] = Form.useForm();
  useEffect(() => {
    dispatch(callListCourse());
  }, []);
  useEffect(() => {
    // Ki·ªÉm tra xem course c√≥ d·ªØ li·ªáu kh√¥ng tr∆∞·ªõc khi c·∫≠p nh·∫≠t form
    if (course) {
      form.setFieldsValue(course);
    }
  }, [course, form]);
  useEffect(() => {
    // Ki·ªÉm tra xem gi√° tr·ªã ngayTao c√≥ ƒë∆∞·ª£c l∆∞u trong localStorage kh√¥ng
    const ngayTaoValue = localStorage.getItem("ngayTao");

    // N·∫øu c√≥ gi√° tr·ªã ngayTao t·ª´ localStorage v√† course c√≥ gi√° tr·ªã, c·∫≠p nh·∫≠t gi√° tr·ªã cho tr∆∞·ªùng ngayTao
    if (ngayTaoValue && course) {
      form.setFieldsValue({
        ngayTao: ngayTaoValue,
      });
    }
  }, [form, course]);
  const onChange = (date, dateString) => {
    // C·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa tr∆∞·ªùng ngayTao
    form.setFieldsValue({
      ngayTao: dateString,
    });

    // L∆∞u gi√° tr·ªã v√†o localStorage
    localStorage.setItem("ngayTao", dateString);
  };
  const onFinish = (values) => {
    console.log("üôÇ ~ onFinish ~ values:", values);
  };

  const optionsCategory = listCategoryArr.map((name, index) => ({
    key: index,
    value: name.maDanhMuc,
    label: name.maDanhMuc,
  }));
  const items = [
    {
      key: "1",
      label: "Info User",
      children: (
        <Form
          onFinish={onFinish}
          initialValue={""}
          form={form}
          className="grid grid-cols-2 space-x-5 p-20"
        >
          <Form.Item name="maKhoaHoc" label="ID course">
            <Input />
          </Form.Item>
          <Form.Item name="biDanh" label="Alias">
            <Input />
          </Form.Item>
          <Form.Item name="tenKhoaHoc" label="Name course">
            <Input />
          </Form.Item>
          <Form.Item name="luotXem" label="View">
            <Input type="number" />
          </Form.Item>
          <Form.Item name="soLuongHocVien" label="S·ªë l∆∞·ª£ng h·ªçc vi√™n">
            <Input type="number" />
          </Form.Item>
          <Form.Item name="maNhom" label="ID Group">
            <Input disabled={true} />
          </Form.Item>
          <Form.Item
            name={["danhMucKhoaHoc", "maDanhMucKhoahoc"]}
            label="ID category"
            rules={[
              {
                required: true,
                message: "Please select date!",
              },
            ]}
          >
            <Select
              placeholder="Select ID category"
              style={{
                width: 200,
              }}
              options={optionsCategory}
              optionFilterProp="label"
            />
          </Form.Item>

          <div className="flex mb-2">
            <p className="m-0 font-semibold w-40 text-right pr-2">H√¨nh ·∫£nh: </p>
            <input
              type="file"
              accept="image/jpg, image/jpeg, image/png, image/gif"
              className="p-0"
              // onChange={(e) => {
              // l·∫•y file ƒë√£ ch·ªçn
              // const file = e.target.files[0];
              // t·∫°o ƒë·ªëi t∆∞·ª£ng ƒë·ªçc file
              // const reader = new FileReader();
              // reader.readAsDataURL(file);
              // reader.onload = (e) => {
              // setUrlHinhAnh(e.target.result);
              // };
              // setValue("hinhAnh", file);
              // }}
            />
            <p className="m-0 text-red-500 h-5 pl-2 w-60"></p>
          </div>
          <Form.Item
            name="ngayTao"
            label="Date"
            rules={[
              {
                required: true,
                message: "Please select date!",
              },
            ]}
          >
            <Space direction="vertical">
              <DatePicker
                onChange={onChange}
                defaultValue={
                  dayjs(course?.ngayTao, "DD/MM/YYYY").isValid()
                    ? dayjs(course?.ngayTao, "DD/MM/YYYY")
                    : undefined
                }
                format="DD/MM/YYYY"
              />
            </Space>
          </Form.Item>
          <Form.Item name={["nguoiTao", "hoTen"]} label="Creator">
            <Input disabled={true} />
          </Form.Item>
          <Form.Item name="moTa" label="Description">
            <TextArea rows={4} placeholder="Description course" />
          </Form.Item>
          <Form.Item
            wrapperCol={{
              offset: 8,
              span: 16,
            }}
          >
            <Button
              className="bg-color3 text-white hover:bg-color4 hover:text-black border-none w-32"
              htmlType="submit"
            >
              Add course
            </Button>
          </Form.Item>
        </Form>
      ),
    },
  ];
  return (
    <div>
      <div>
        <Tabs
          className="mx-2 md:mx-10 lg:mx-40"
          defaultActiveKey="1"
          items={items}
        />
      </div>
    </div>
  );
}

///
 const check = (course) => {
    const checkNullValue = (course) => {
      for (const key in course) {
        if (course.hasOwnProperty(key)) {
          const value = course[key];

          // Ki·ªÉm tra gi√° tr·ªã c·ªßa key
          if (value === null) {
            return false;
          }

          // N·∫øu gi√° tr·ªã l√† m·ªôt object ho·∫∑c array, th·ª±c hi·ªán ki·ªÉm tra ƒë·ªá quy
          if (typeof value === "object" && value !== null) {
            if (Array.isArray(value)) {
              // N·∫øu gi√° tr·ªã l√† m·ªôt array, ki·ªÉm tra t·ª´ng ph·∫ßn t·ª≠ trong array
              for (let i = 0; i < value.length; i++) {
                if (!checkNullValue(value[i])) {
                  return false; // N·∫øu c√≥ gi√° tr·ªã null, tr·∫£ v·ªÅ false
                }
              }
            } else {
              // N·∫øu gi√° tr·ªã l√† m·ªôt object, th·ª±c hi·ªán ki·ªÉm tra ƒë·ªá quy
              if (!checkNullValue(value)) {
                return false; // N·∫øu c√≥ gi√° tr·ªã null, tr·∫£ v·ªÅ false
              }
            }
          }
        }
      }
      return true;
    };

    return checkNullValue(course);
  };
  ///
  ////
  ///
  ///
  import React, { useEffect, useState } from "react";
import { Space, Pagination, Dropdown, Menu } from "antd";
import { BarsOutlined, DownOutlined, UpOutlined } from "@ant-design/icons";
import CardItem from "../Card/CardItem";
import { useSelector } from "react-redux";

export default function Filter({ courseArr, filter, sortBy }) {
  const user = useSelector((state) => state.userSlice.user);
  const detailUser = useSelector((state) => state.userSlice.detailUser);

  // Array kh√≥a h·ªçc
  const [currentCoursesArr, setCurrentCoursesArr] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [sortOrder, setSortOrder] = useState("desc");
  const [hoveredItem, setHoveredItem] = useState(null);
  // Ph√¢n trang
  const pageSize = 10;
  const totalCourses = currentCoursesArr.length;
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = startIndex + pageSize;

  useEffect(() => {
    const filterState = sessionStorage.getItem("filterState");
    if (filterState) {
      setCurrentCoursesArr(JSON.parse(filterState));
    } else {
      setCurrentCoursesArr(courseArr);
    }
  }, [courseArr]);
  // X·ª≠ l√Ω logic
  const handleDropDown = (item) => {
    const filterMap = {
      1: (course) => true,
      2: (course) =>
        ["FrontEnd", "BackEnd", "FullStack"].includes(
          course.danhMucKhoaHoc.maDanhMucKhoahoc
        ),
      "2-1": (course) => course.danhMucKhoaHoc.maDanhMucKhoahoc === "FrontEnd",
      "2-2": (course) => course.danhMucKhoaHoc.maDanhMucKhoahoc === "BackEnd",
      "2-3": (course) => course.danhMucKhoaHoc.maDanhMucKhoahoc === "FullStack",
      3: (course) => course.danhMucKhoaHoc.maDanhMucKhoahoc === "DiDong",
      4: (course) =>
        ["TuDuy", "Design"].includes(course.danhMucKhoaHoc.maDanhMucKhoahoc),
      "4-1": (course) => course.danhMucKhoaHoc.maDanhMucKhoahoc === "TuDuy",
      "4-2": (course) => course.danhMucKhoaHoc.maDanhMucKhoahoc === "Design",
    };

    const filteredList = courseArr.filter(filterMap[item]);
    setCurrentCoursesArr(filteredList);
    setCurrentPage(1);
    sessionStorage.setItem("filterState", JSON.stringify(filteredList));
  };

  const handleSortBy = (item) => {
    sortOrder === "desc" ? setSortOrder("asc") : setSortOrder("desc");
    const sortedCourses = [...currentCoursesArr].sort((a, b) => {
      if (item.key === "1") {
        return sortOrder === "desc"
          ? a.luotXem - b.luotXem
          : b.luotXem - a.luotXem;
      } else {
        return 0;
      }
    });

    setCurrentCoursesArr(sortedCourses);
    setCurrentPage(1);

    // L∆∞u tr·∫°ng th√°i filter v√†o sessionStorage
    sessionStorage.setItem("filterState", JSON.stringify(sortedCourses));
  };
  const handlePageChange = (page) => {
    setCurrentPage(page);
  };
  // Render UI
  const renderFilterMenu = () => (
    <Menu>
      {filter.map((item) => (
        <Menu.Item
          key={item.key}
          onMouseEnter={() => setHoveredItem(item.key)}
          onMouseLeave={() => setHoveredItem(null)}
          className="text-xs"
        >
          <span onClick={() => handleDropDown(item.key)}>{item.label}</span>
          <span>
            {item.key === hoveredItem && item.children && (
              <Menu
                className="absolute top-0 left-full text-xs"
                // style={{ fontSize: "1vw" }}
              >
                {item.children.map((child) => (
                  <Menu.Item
                    key={child.key}
                    onClick={() => handleDropDown(child.key)}
                  >
                    <span>{child.label}</span>
                  </Menu.Item>
                ))}
              </Menu>
            )}
          </span>
        </Menu.Item>
      ))}
    </Menu>
  );
  const renderSortByMenu = () => (
    <Menu>
      {sortBy.map((item) => (
        <Menu.Item
          key={item.key}
          onClick={() => handleSortBy(item)}
          onMouseEnter={() => setHoveredItem(item.key)}
          onMouseLeave={() => setHoveredItem(null)}
          className="text-xs"
        >
          <span className="mr-2">{item.label}</span>
          <span>
            {item.key === "1" &&
              (sortOrder === "desc" ? (
                <UpOutlined style={{ fontSize: "0.8vw" }} />
              ) : (
                <DownOutlined style={{ fontSize: "0.8vw" }} />
              ))}
          </span>
        </Menu.Item>
      ))}
    </Menu>
  );
  const renderDropdown = (menu, label) => (
    <Dropdown
      arrow
      className="cursor-pointer border border-color3"
      trigger={["click"]}
      overlay={menu}
    >
      <span
        style={{ fontSize: "1.25vw" }}
        className="p-2 flex items-center justify-start text-xs"
      >
        <Space>
          <span className=" font-bold">{label}</span>
          <BarsOutlined />
        </Space>
      </span>
    </Dropdown>
  );
  return (
    <div className="grid grid-cols-1 lg:grid-cols-6 space-y-5 md:space-y-0">
      <div className=" col-span-2 lg:col-span-1 flex md:space-x-4">
        <div>{renderDropdown(renderFilterMenu(), "Filter")}</div>
        <div>{renderDropdown(renderSortByMenu(), "Sort by")}</div>
      </div>
      <div className="flex flex-col justify-center items-center col-span-5 lg:col-span-5 space-y-10">
        <div className="grid grid-cols-1 space-y-1">
          {currentCoursesArr
            .slice(startIndex, endIndex)
            .map((course, index) => {
              return (
                <CardItem
                  course={course}
                  stypeCard={2}
                  isBestSeller={false}
                  key={index}
                  isHomePage={true}
                  detailUser={detailUser}
                  user={user}
                />
              );
            })}
        </div>
        <div className="pagination-container">
          <Pagination
            current={currentPage}
            total={totalCourses}
            pageSize={pageSize}
            onChange={handlePageChange}
          />
        </div>
      </div>
    </div>
  );
}
   <div className="flex items-center justify-between ">
                  <span>{`${category.maDanhMuc}`}</span>
                  <span>{`(${filteredCourses.length} course)`}</span>
                </div>
              ),