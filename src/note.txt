/// tabsAntd - vesion 1

  import { Tabs } from "antd";
import TabPane from "antd/es/tabs/TabPane";
import React from "react";
import CardItem from "../Card/CardItem";
import Slider from "react-slick";
import { useSelector } from "react-redux";


export default function TabsAntd() {
 

  const courseArr = useSelector((state) => state.dataSlice.listCourseArr);
  const user = useSelector((state) => state.userSlice.user);
  const detailUser = useSelector((state) => state.userSlice.detailUser);


  const settings = {
    className: "center",
    infinite: true,
    centerMode: true,
    centerPadding: "2px",
    slidesToShow: 4,
    slidesToScroll: 1,
    speed: 300,
    rows: 1,
    cssEase: "linear",

    responsive: [
      {
        breakpoint: 1024,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2,
          initialSlide: 2,
        },
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
    ],
  };
  const listTabs = [
    { key: "1", label: "Most popular", tab: "1" },
    { key: "2", label: "New", tab: "2" },
    { key: "3", label: "Trend", tab: "3" },
  ];

  const renderCourse = (courses, stypeCard, isBestSeller) => {
    return courses.map((course, index) => (
      <CardItem
        course={course}
        stypeCard={stypeCard}
        isBestSeller={isBestSeller}
        isCategoryPage={false}
        detailUser={detailUser}
        user={user}
      />
    ));
  };
  const filterCourses = (courseArr, condition) => {
    return courseArr.filter((course) =>
      condition.includes(course.danhMucKhoaHoc.maDanhMucKhoahoc)
    );
  };
  const renderTab = (key, courseArr) => {
    return key === "1" ? (
      renderCourse(
        courseArr
          .slice()
          .sort((a, b) => b.luotXem - a.luotXem)
          .slice(0, 8),
        1,
        true
      )
    ) : key === "2" ? (
      renderCourse(filterCourses(courseArr, ["TuDuy", "DiDong"]), 1, false)
    ) : key === "3" ? (
      renderCourse(
        filterCourses(courseArr, ["FrontEnd", "BackEnd", "FullStack"]),
        1,
        false
      )
    ) : (
      <></>
    );
  };
  const onChange = (key) => {
    console.log(key);
  };
  const items = [
    {
      key: '1',
      label: 'Tab 1',
      children: 'Content of Tab Pane 1',
    },
    {
      key: '2',
      label: 'Tab 2',
      children: 'Content of Tab Pane 2',
    },
    {
      key: '3',
      label: 'Tab 3',
      children: 'Content of Tab Pane 3',
    },
  ];
  return (
    <Tabs defaultActiveKey="0"  destroyInactiveTabPane={true} className="px-10">
      {listTabs.map((item, index) => (
        <TabPane
          key={index}
          tab={
            <span style={{ fontSize: "1vw" }} className=" text-black">
              {item.label}
            </span>
          }
        >
          <Slider {...settings}>{renderTab(item.key, courseArr)}</Slider>
        </TabPane>
      ))}
    </Tabs>
  );
}


/// versin-2
import { Tabs } from "antd";
import TabPane from "antd/es/tabs/TabPane";
import React from "react";
import CardItem from "../Card/CardItem";
import Slider from "react-slick";
import { useSelector } from "react-redux";

export default function TabsAntd() {
  const courseArr = useSelector((state) => state.dataSlice.listCourseArr);
  const user = useSelector((state) => state.userSlice.user);
  const detailUser = useSelector((state) => state.userSlice.detailUser);

  const labelStyle = { fontSize: "1vw" };
  const settings = {
    className: "center",
    infinite: true,
    centerMode: true,
    centerPadding: "2px",
    slidesToShow: 4,
    slidesToScroll: 1,
    speed: 300,
    rows: 1,
    cssEase: "linear",

    responsive: [
      {
        breakpoint: 1024,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 2,
          initialSlide: 2,
        },
      },
      {
        breakpoint: 480,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
    ],
  };
  const listTabs = [
    { key: "1", label: "Most popular", tab: "1", },
    { key: "2", label: "New", tab: "2" },
    { key: "3", label: "Trend", tab: "3" },
  ];
  const onChange = (key) => {
    console.log(key);
  };
  return (
    <Tabs
      defaultActiveKey="1"
      onChange={onChange}
      destroyInactiveTabPane={true}
      className="px-10"
    >
      {listTabs.map((item) => (
        <TabPane
          key={item.key}
          tab={
            <span style={labelStyle} className=" text-black">
              {item.label}
            </span>
          }
        >
          <Slider {...settings}>
            {item.tab === "1"
              ? courseArr
                  .slice()
                  .sort((a, b) => b.luotXem - a.luotXem)
                  .slice(0, 8)
                  .map((course, index) => (
                    <CardItem
                      course={course}
                      stypeCard={1}
                      isBestSeller={true}
                      isCategoryPage={false}
                      detailUser={detailUser}
                      user={user}
                    />
                  ))
              : ""}
            {item.tab === "2"
              ? courseArr
                  .filter((course) => {
                    return (
                      course.danhMucKhoaHoc.maDanhMucKhoahoc === `TuDuy` ||
                      course.danhMucKhoaHoc.maDanhMucKhoahoc === `DiDong`
                    );
                  })
                  .map((course, index) => (
                    <CardItem
                      course={course}
                      stypeCard={1}
                      isBestSeller={false}
                      isCategoryPage={false}
                      detailUser={detailUser}
                      user={user}
                    />
                  ))
              : ""}
            {item.tab === "3"
              ? courseArr
                  .filter((course) => {
                    return (
                      course.danhMucKhoaHoc.maDanhMucKhoahoc === `FrontEnd` ||
                      course.danhMucKhoaHoc.maDanhMucKhoahoc === `BackEnd` ||
                      course.danhMucKhoaHoc.maDanhMucKhoahoc === `FullStack`
                    );
                  })
                  .map((course, index) => (
                    <CardItem
                      course={course}
                      stypeCard={1}
                      isBestSeller={false}
                      isCategoryPage={false}
                      detailUser={detailUser}
                      user={user}
                    />
                  ))
              : ""}
          </Slider>
        </TabPane>
      ))}
    </Tabs>
  );
}
////
 <div
      style={{
        backgroundImage: `url(${listCourse.hinhAnh})`,
      }}
      className="bg-cover bg-center relative w-full h-96 flex justify-center items-center "
    >
      <div className="absolute inset-0 backdrop-blur-sm bg-black/50 "></div>
      <div className="absolute border border-red-500 w-full grid grid-cols-5">
        <div className="col-span-3">
          <p></p>
        </div>
        <div className=" border border-yellow-500 flex items-center justify-center col-span-2 ">
          <img src={listCourse.hinhAnh} alt="" className="w-52" />
        </div>
      </div>
    </div>


    
      const detailCourse = listCourse.find(
    (course) => course.maKhoaHoc === idDetail
  );


  ////


  import { Button, Card, Modal, Rate, Space } from "antd";
import React, { useState } from "react";
import { NavLink } from "react-router-dom";
import {
  ShoppingCartOutlined,
  YoutubeOutlined,
  UploadOutlined,
  LockOutlined,
  TeamOutlined,
  SoundOutlined,
  DeleteOutlined,
} from "@ant-design/icons";
import { useDispatch } from "react-redux";
import {
  cancelCourse,
  infoDetailUser,
  signUpCourse,
} from "../../redux/User/action/callApi";

export default function CardItem({
  course,
  stypeCard,
  isBestSeller,
  isHomePage,
  isCategoryPage,
  isSearchPage,
  isAccontPage,
  isDetailpage,
  detailUser,
  user,
}) {
  const dispatch = useDispatch();
  const handleBuyNow = (maKhoaHoc) => {
    if (
      detailUser &&
      detailUser.chiTietKhoaHocGhiDanh.find(
        (user) => user.maKhoaHoc === maKhoaHoc
      )
    ) {
      Modal.error({
        title: "Registered Course",
        content: (
          <div>
            <p>Please choose another course!</p>
          </div>
        ),
        okButtonProps: {
          className: "bg-red-500 text-white",
        },
      });
    } else {
      dispatch(signUpCourse(maKhoaHoc, detailUser.taiKhoan));
      Modal.success({
        title: "Successfully Registered",
        content: (
          <div>
            <p>Let's start learning right away!</p>
          </div>
        ),
        okButtonProps: {
          className: "bg-color3 text-white",
        },
      });
    }
  };
  const handleCancelCourse = (maKhoaHoc) => {
    dispatch(cancelCourse(maKhoaHoc, detailUser.taiKhoan));
    window.location.reload();
  };
  return (
    <>
      {stypeCard == 1 && (
        <div className="py-7 mx-2 ">
          <Card
            className="group border-0 shadow-lg shadow-black/30 hover:shadow-black/80  bg-gradient-to-b from-color3/90 to-color2 transition duration-500 ease-in-out transform hover:scale-100 text-white font-sans w-full overflow-visible"
            key={course.maKhoaHoc}
            hoverable
          >
            <div className="flex flex-col justify-center items-center space-y-2 ">
              <img
                className="drop-shadow-md group-hover:drop-shadow-2xl transition duration-500  ease-in-out group-hover:scale-x-105 transform group-hover:-translate-y-3 h-[18vh] w-full -mt-2 px-4"
                alt="example"
                src={course.hinhAnh}
                loading="lazy"
              />
              <span className="bg-color3 shadow-md shadow-color3/80 text-center font-medium transform transition duration-700 group-hover:-translate-y-3 group-hover:scale-x-105 group-hover:shadow-lg p-2 w-full whitespace-nowrap truncate ">
                {course.tenKhoaHoc}
              </span>
              <div className="space-y-2">
                <NavLink
                  style={{ fontSize: "1vw" }}
                  className="flex justify-center text-center p-2 w-32 backdrop-blur-sm shadow-color3/80 shadow-sm bg-color1/10  border-color3/50 rounded-md transform transition duration-500 group-hover:-translate-y-3 group-hover:scale-x-100 group-hover:shadow-lg  hover:text-white whitespace-normal text-sm"
                >
                  <span className="line-clamp-1 md:line-clamp-2">
                    {course.danhMucKhoaHoc.maDanhMucKhoahoc}
                  </span>
                </NavLink>
                <NavLink
                  onClick={() => handleBuyNow(course.maKhoaHoc)}
                  to={!user ? "/login" : ""}
                  style={{ fontSize: "2.5vh" }}
                  className="p-2 backdrop-blur-sm bg-color4 shadow-color3/80 shadow-sm border-color3/90 drop-shadow-xl group-hover:shadow-lg rounded-md transform transition duration-500 group-hover:-translate-y-3 group-hover:scale-x-105 hover:text-color3 flex justify-center items-center text-center w-32 text-xs"
                >
                  <Space>
                    <ShoppingCartOutlined />
                    Buy Now
                  </Space>
                </NavLink>
              </div>
            </div>
            <div className="w-full h-28 overflow-hidden ">
              {/* ẩn ở màn hình Mobile */}
              <div className="hidden md:block">
                <div className="flex items-center justify-center transition ease-in-out duration-700 group-hover:hidden mt-6 ">
                  <Space>
                    <Rate
                      style={{ fontSize: "1.25vw" }}
                      className=" text-color4 "
                      allowHalf
                      defaultValue={4.5}
                      disabled
                    />
                    <span style={{ fontSize: "0.75vw" }} className="mt-2">
                      ({course.luotXem} View){" "}
                    </span>
                  </Space>
                </div>
                <div className="flex flex-col transition ease-in-out duration-500 translate-y-48 group-hover:translate-y-1 px-2">
                  <h2
                    style={{ fontSize: "1vw" }}
                    className="text-left line-clamp-3 text-ellipsis m-2 mt-0"
                  >
                    {course.moTa}
                  </h2>
                  <NavLink
                    to={`/detail/${course.maKhoaHoc}`}
                    style={{ fontSize: 10 }}
                    className="ml-2 text-color4 hover:text-color5"
                  >
                    View details {">"}
                  </NavLink>
                </div>
              </div>
              <div className="flex flex-col p-2">
                <h2 className="text-left line-clamp-3 text-ellipsis m-2 mt-0 text-xs">
                  {course.moTa}
                </h2>
                <NavLink
                  to={`/detail/${course.maKhoaHoc}`}
                  style={{ fontSize: 10 }}
                  className="ml-2 text-color4 hover:text-color5"
                >
                  View details {">"}
                </NavLink>
              </div>
              {isBestSeller && (
                <h2 className="backdrop-blur-sm bg-red-600 rounded-l-sm py-1 px-2 -right-1 bottom-5 absolute skew-x-3 shadow-lg shadow-color3/80 transition ease-in-out duration-500 translate-y-0 group-hover:translate-y-2">
                  Best seller
                </h2>
              )}
            </div>
          </Card>
        </div>
      )}

      {stypeCard == 2 && (
        <Card key={course.maKhoaHoc} className="mb-2">
          <div className="grid grid-cols-4 p-2 space-x-4 ">
            <div className="col-span-1 flex justify-center items-center">
              <img
                src={course.hinhAnh}
                className="h-[22vh] w-full"
                loading="lazy"
              />
            </div>
            <div className="col-span-3 grid grid-cols-1 ">
              <span className="font-bold">{course.tenKhoaHoc}</span>
              <span>
                <p
                  className="line-clamp-3  overflow-hidden text-xs"
                >
                  {course.moTa}
                </p>
              </span>
              <div className="flex justify-between items-center pt-1">
                <div className="hidden md:block">
                  <Space style={{ fontSize: "1vw" }}>
                    <Rate
                      style={{ fontSize: "1.5vw" }}
                      className=" text-color4 "
                      allowHalf
                      defaultValue={4.5}
                      disabled
                    />
                    <span className="mt-2">({course.luotXem} View)</span>
                  </Space>
                </div>

                {isAccontPage && (
                  <>
                    <span >{course.ngayTao}</span>
                    <Button
                      onClick={() => handleCancelCourse(course.maKhoaHoc)}
                      style={{ fontSize: 12 }}
                      className=" text-color4 hover:text-color5 hover:border-color5"
                    >
                      Delete <DeleteOutlined />
                    </Button>
                  </>
                )}
                {(isCategoryPage || isSearchPage) && (
                  <>
                    <span >{course.ngayTao}</span>
                    <div className="space-x-3">
                      <NavLink
                        onClick={() => handleBuyNow(course.maKhoaHoc)}
                        to={!user ? "/login" : ""}
                        style={{ fontSize: 12 }}
                        className=" text-color4 hover:text-color5"
                      >
                        Buy Now <ShoppingCartOutlined />
                      </NavLink>
                      <NavLink
                        to={`/detail/${course.maKhoaHoc}`}
                        style={{ fontSize: 12 }}
                        className=" text-color3 hover:text-color2"
                      >
                        View detail {">"}
                      </NavLink>
                    </div>
                  </>
                )}
                {isHomePage && (
                  <>
                    <span className="text-xs ">
                      {course.danhMucKhoaHoc.maDanhMucKhoahoc}
                    </span>
                    <div className="space-x-3">
                      <NavLink
                        onClick={() => handleBuyNow(course.maKhoaHoc)}
                        to={!user ? "/login" : ""}
                        style={{ fontSize: 12 }}
                        className=" text-color4 hover:text-color5"
                      >
                        Buy Now <ShoppingCartOutlined />
                      </NavLink>
                      <NavLink
                        to={`/detail/${course.maKhoaHoc}`}
                        style={{ fontSize: 12 }}
                        className=" text-color3 hover:text-color2"
                      >
                        View detail {">"}
                      </NavLink>
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        </Card>
      )}
      {/* Card hot */}
      {stypeCard == 3 && (
        <Card
          key={course.maKhoaHoc}
          className="overflow-x-auto w-full bg-gradient-to-b from-color4/40 to-color2 flex flex-col  items-end shadow-lg shadow-black/70 mt-3  space-y-1 p-2 "
        >
          <img src={course.hinhAnh} loading="lazy" className="" />

          <h2 className="text-center font-bold">{course.tenKhoaHoc}</h2>
          <span className="flex justify-center" style={{ fontSize: "1vw" }}>
            {course.danhMucKhoaHoc.maDanhMucKhoahoc}
          </span>
          <div className="flex flex-col space-y-1 mb-2 ">
            <span className="mb-2">
              <Space>
                <SoundOutlined className="text-md" />
                <span className="font-medium">
                  The hottest courses at the moment
                </span>
              </Space>
            </span>
            <span>
              <Space>
                <YoutubeOutlined className="text-md" />
                {course.luotXem}
              </Space>
            </span>
            <span>
              <Space>
                <UploadOutlined className="text-md" />
                {course.ngayTao}
              </Space>
            </span>
            <span>
              <Space>
                <LockOutlined className="text-md" />
                {course.maKhoaHoc}
              </Space>
            </span>
            <span>
              <Space>
                <TeamOutlined className="text-md" />
                {course.maNhom}
              </Space>
            </span>
          </div>
          <NavLink
            onClick={() => handleBuyNow(course.maKhoaHoc)}
            style={{ fontSize: "2.5vh" }}
            className="w-full h-full backdrop-blur-sm bg-color4 shadow-color3/80 shadow-sm border-color3/90 drop-shadow-xl hover:shadow-lg rounded-md transform transition duration-500 hover:scale-x-105 hover:text-color3 flex items-center text-center justify-center py-2 "
          >
            <Space>
              <ShoppingCartOutlined />
              Buy Now
            </Space>
          </NavLink>
        </Card>
      )}
      {isDetailpage && (
        <>
          <div
            style={{
              backgroundImage: `url(${course.hinhAnh})`,
            }}
            className="bg-cover bg-center relative w-full h-96 flex justify-center items-center "
          >
            <div className="absolute inset-0 backdrop-blur-sm bg-black/50 "></div>
            <div className="absolute w-full grid grid-cols-5 text-white">
              <div className="col-span-3  space-y-10 pl-5">
                <p className="text-6xl">{course.tenKhoaHoc}</p>
                <div className="space-y-3">
                  <h2 className="flex space-x-5">
                    <p>Review course:</p>
                    <Space>
                      <Rate
                        style={{ fontSize: "1.25vw" }}
                        className=" text-color4 "
                        allowHalf
                        defaultValue={4.5}
                        disabled
                      />
                      <span style={{ fontSize: "1vw" }} className="mt-2">
                        ({course.luotXem} View){" "}
                      </span>
                    </Space>
                  </h2>
                  <NavLink
                    onClick={() => handleBuyNow(course.maKhoaHoc)}
                    to={!user ? "/login" : ""}
                    style={{ fontSize: "2.5vh" }}
                    className="p-2 backdrop-blur-sm bg-color4 shadow-color3/80 shadow-sm border-color3/90 drop-shadow-xl group-hover:shadow-lg rounded-full transform transition duration-500 group-hover:-translate-y-3 group-hover:scale-x-105 hover:text-color3 flex justify-center items-center text-center w-32"
                  >
                    <Space>
                      <ShoppingCartOutlined />
                      Buy Now
                    </Space>
                  </NavLink>
                </div>
              </div>
              <div className=" flex items-end justify-center col-span-2 ">
                <img
                  src={course.hinhAnh}
                  alt=""
                  className="w-52 shadow-lg shadow-black/50"
                />
              </div>
            </div>
          </div>
          <div className="p-10">
            <h2 className="py-4 text-3xl">Course description</h2>
            <Space>
              <Rate
                style={{ fontSize: "1.25vw" }}
                className=" text-color4 "
                allowHalf
                defaultValue={4.5}
                disabled
              />
              <span style={{ fontSize: "1vw" }} className="mt-2">
                ({course.luotXem} View){" "}
              </span>
            </Space>
            <p>{course.moTa}</p>
            <p className="text-end">{course.ngayTao}</p>
          </div>
        </>
      )}
    </>
  );
}






????



import { Button, Form, Input, Modal, Select } from "antd";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { addUser, listUser } from "../../redux/User/action/callApi";
import Alert from "antd/es/alert/Alert";

export default function SignUpPage() {
  const onChange = (key) => {
    console.log(key);
  };
  const listUserArr = useSelector((state) => state.userSlice.listUser);
  console.log("🙂 ~ SignUpPage ~ listUserArr:", listUserArr);

  const dispatch = useDispatch();
  const [form] = Form.useForm();
  const [showHelp, setShowHelp] = useState(false);
  useEffect(() => {
    // Set giá trị mặc định cho form từ hook useForm
    form.setFieldsValue({
      taiKhoan: String(""),
      matKhau: String(""),
      hoTen: String(""),
      soDt: String(""),
      maLoaiNguoiDung: String(""),
      maNhom: String(""),
      email: String(""),
    });
  }, [form]);

  const onFinish = (values) => {
    const isFormValid = form
      .getFieldsError()
      .every((field) => field.errors.length === 0);

    setShowHelp(!isFormValid || form.isFieldsTouched());

    const duplicateFields = Object.keys(values).filter((key) => {
      return listUserArr.some(
        (user) => user.hasOwnProperty(key) && values[key] === user[key]
      );
    });

    if (duplicateFields.length > 0) {
      // Có ít nhất một giá trị trùng lặp, hiển thị Modal
      Modal.error({
        title: "Duplicate Values",
        content: (
          <div>
            <p>The values for the following fields are already in use:</p>
            <ul>
              {duplicateFields.map((field) => (
                <li className="text-red-700" key={field}>
                  {field}
                </li>
              ))}
            </ul>
            <p>Please choose different values.</p>
          </div>
        ),
        okButtonProps: {
          className: "bg-red-500 text-white",
        },
      });
    } else {
      dispatch(addUser(values));
    }
  };

  const options = [
    {
      value: "GP09",
      label: "GP09",
    },
  ];
  return (
    <div
      style={{
        backgroundImage: `url("./IMG/bg1.jpg")`,
      }}
    >
      <div className=" flex items-center justify-center h-screen w-screen md:px-10 lg:px-40">
        <Form
          className="backdrop-blur-sm bg-white/20 grid md:grid-cols-5 lg:grid-cols-8 items-center justify-center rounded-2xl p-5 md:space-x-3 "
          onFinish={(values) => onFinish(values)}
          initialValues=""
          form={form}
        >
          <div className="hidden md:block md:col-span-3 lg:col-span-5 md:h-full md:w-full">
            <img src="./IMG/bg1.jpg" alt="" />
          </div>
          <div className="lg:col-span-3 col-span-2 h-full w-full grid grid-cols-1 items-center justify-center">
            <Form.Item
              name="taiKhoan"
              // initialValue={""}
              rules={[
                {
                  required: true,
                  message: "Please enter your username!",
                },
                {
                  pattern: /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/,
                  message:
                    "Username must have at least 8 characters and numbers",
                },
              ]}
              help={
                showHelp &&
                form
                  .getFieldsError()
                  .find((item) => item.name === "taiKhoan")
                  ?.errors.map((error) => (
                    <div
                      key={error.status}
                      style={{
                        color: error.status === "error" ? "#ff4d4f" : "#bfbfbf",
                      }}
                    >
                      {error.message}
                    </div>
                  ))
              }
            >
              <Input
                placeholder="Username"
                onChange={(e) => {
                  // Sử dụng hàm normalize để chắc chắn rằng giá trị là chuỗi
                  form.setFieldsValue({
                    taiKhoan: String(e.target.value),
                  });
                }}
              />
            </Form.Item>
            {/* password */}
            <Form.Item
              name="matKhau"
              rules={[
                {
                  required: true,
                  message: "Please enter your password!",
                },
                {
                  pattern: /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/,
                  message:
                    "Password must have at least 8 characters and numbers",
                },
              ]}
              help={
                showHelp &&
                form
                  .getFieldsError()
                  .find((item) => item.name === "matKhau")
                  ?.errors.map((error) => (
                    <div
                      key={error.status}
                      style={{
                        color: error.status === "error" ? "#ff4d4f" : "#bfbfbf",
                      }}
                    >
                      {error.message}
                    </div>
                  ))
              }
            >
              <Input
                placeholder="Password"
                onChange={(e) => {
                  // Sử dụng hàm normalize để chắc chắn rằng giá trị là chuỗi
                  form.setFieldsValue({
                    matKhau: String(e.target.value),
                  });
                }}
              />
            </Form.Item>
            {/* name */}
            <Form.Item
              name="hoTen"
              rules={[
                {
                  required: true,
                  message: "Please enter your name!",
                },
                {
                  pattern: /^[a-zA-Z\u00C0-\u1EF3\s]+$/,
                  message:
                    "Name should not contain numbers or special characters",
                },
              ]}
              help={
                showHelp &&
                form
                  .getFieldsError()
                  .find((item) => item.name === "hoTen")
                  ?.errors.map((error) => (
                    <div
                      key={error.status}
                      style={{
                        color: error.status === "error" ? "#ff4d4f" : "#bfbfbf",
                      }}
                    >
                      {error.message}
                    </div>
                  ))
              }
            >
              <Input
                placeholder="Fullname"
                onChange={(e) => {
                  // Sử dụng hàm normalize để chắc chắn rằng giá trị là chuỗi
                  form.setFieldsValue({
                    hoTen: String(e.target.value),
                  });
                }}
              />
            </Form.Item>
            {/* sdt */}
            <Form.Item
              name="soDt"
              rules={[
                {
                  required: true,
                  message: "Please enter your phone number!",
                },
                {
                  pattern: /^[0-9]{10}$/,
                  message: "Phone number must consist of 10 digits",
                },
              ]}
              help={
                showHelp &&
                form
                  .getFieldsError()
                  .find((item) => item.name === "soDt")
                  ?.errors.map((error) => (
                    <div
                      key={error.status}
                      style={{
                        color: error.status === "error" ? "#ff4d4f" : "#bfbfbf",
                      }}
                    >
                      {error.message}
                    </div>
                  ))
              }
            >
              <Input
                placeholder="Phone number"
                onChange={(e) => {
                  // Sử dụng hàm normalize để chắc chắn rằng giá trị là chuỗi
                  form.setFieldsValue({
                    soDt: String(e.target.value),
                  });
                }}
              />
            </Form.Item>
            {/* Email */}
            <Form.Item
              name="email"
              rules={[
                {
                  required: true,
                  message: "Please enter a valid email!",
                },
                {
                  pattern: /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/,
                  message: "Please enter a valid email!",
                },
              ]}
              help={
                showHelp &&
                form
                  .getFieldsError()
                  .find((item) => item.name === "email")
                  ?.errors.map((error) => (
                    <div
                      key={error.status}
                      style={{
                        color: error.status === "error" ? "#ff4d4f" : "#bfbfbf",
                      }}
                    >
                      {error.message}
                    </div>
                  ))
              }
            >
              <Input placeholder="Email" />
            </Form.Item>
            <Form.Item
              name="maNhom"
              rules={[
                {
                  required: true,
                  message: "Please select ID!",
                },
              ]}
            >
              <Select
                placeholder="ID"
                style={{
                  width: 120,
                }}
                onChange={(values) => dispatch(listUser(values))}
                options={options}
              />
            </Form.Item>
            <Form.Item
              wrapperCol={{
                offset: 8,
                span: 16,
              }}
            >
              <Button
                className="bg-color3 text-white hover:bg-color4 hover:text-black border-none w-32"
                htmlType="submit"
              >
                SignUp
              </Button>
            </Form.Item>
          </div>
        </Form>
      </div>
    </div>
  );
}
